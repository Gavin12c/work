package com.hy.winUtil_gui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;    
import java.awt.MenuItem;    
import java.awt.PopupMenu;    
import java.awt.SystemTray;    
import java.awt.Toolkit;    
import java.awt.TrayIcon;    
import java.awt.event.ActionEvent;    
import java.awt.event.ActionListener;    

import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.plaf.basic.BasicPopupMenuUI;
  
public class Monitor  {    
  
	private static Thread thread_key;
	private static Thread thread_mou;
	
	private static String msg = "";
	private static String ic = "monitor.png";    //彩色
	private static String ig = "monitor2.png";   //灰色
	
	private static boolean suspend = false;  //暂停
	
    public static boolean isSuspend() {
		return suspend;
	}

	public static void setSuspend(boolean suspend) {
		Monitor.suspend = suspend;
	}

	public Monitor()  {    
        boolean [] on_off={true};  
        thread_key = new Thread(new KeyboardHook(on_off));
        thread_mou = new Thread(new MouseHook(on_off));  
        final TrayIcon trayIcon;    //添加到系统托盘的托盘图标
  
        if (SystemTray.isSupported()) {
        	try { 
        		
            SystemTray tray = SystemTray.getSystemTray();    //任务栏状态区域(桌面的系统托盘)
            Image image_c = Toolkit.getDefaultToolkit().getImage(".//lib//"+ic);    
            Image image_g = Toolkit.getDefaultToolkit().getImage(".//lib//"+ig);    
  
            //退出
            ActionListener exitListener = new ActionListener() {    
                public void actionPerformed(ActionEvent e) {    
                    System.exit(0);    
                }  
            };    
            
            //暂停
            ActionListener suspendListener = new ActionListener() {    
            	public void actionPerformed(ActionEvent e) {  
            		msg = "程序已暂停";
            	}  
            };    
  
            PopupMenu popup = new PopupMenu();    //创建具有空名称的新弹出式菜单。
            MenuItem defaultItem2 = new MenuItem(new String("暂停/启动".getBytes("GBK") , "GBK"));    //加标签的菜单项,标签为"暂停" ; 快捷键参数 MenuShortcut s
            defaultItem2.addActionListener(suspendListener);    
            MenuItem defaultItem1 = new MenuItem(new String("退出".getBytes("GBK") , "GBK"));    //加标签的菜单项,标签为"退出 ; 快捷键参数 MenuShortcut s
            defaultItem1.addActionListener(exitListener);    
            popup.add(defaultItem1);    
            popup.add(defaultItem2);    
  
//            if(isSuspend()){
//            	trayIcon = new TrayIcon(image_g, "monitor", popup);   //创建带指定图像、工具提示和弹出菜单的 TrayIcon 
//            }else{
//            	trayIcon = new TrayIcon(image_c, "monitor", popup);   //创建带指定图像、工具提示和弹出菜单的 TrayIcon 
//            }
            
          //定义弹出菜单
    		JPopupMenu Jmenu=new JPopupMenu();
    		
    		//为JPopupMenu设置UI
    		Jmenu.setUI(new BasicPopupMenuUI(){
    			@Override
    			public void paint(Graphics g, JComponent c){
    				super.paint(g, c);
    				
    				//画弹出菜单左侧的灰色背景
    				g.setColor(new Color(236,237,238));
    				g.fillRect(0, 0, 25, c.getHeight());
    				
    				//画弹出菜单右侧的白色背景
    				g.setColor(new Color(255,255,255));
    				g.fillRect(25, 0, c.getWidth()-25, c.getHeight());
    			}
    		});
    		
    		//定义弹出菜单项
    		JMenuItem online = new JMenuItem("我在线上",new ImageIcon(
    				Demo.class.getClassLoader().getResource("lib/monitor.png")));
    		JMenuItem busy = new JMenuItem("忙碌",new ImageIcon(
    				Demo.class.getClassLoader().getResource("lib/monitor2.png")));
    		JMenuItem invisible= new JMenuItem("隐身");
    		JMenuItem openmenu = new JMenuItem("打开主面板");
    		JMenuItem closemenu = new JMenuItem("退出MyQQ");
    		
    		//添加弹出菜单项到弹出菜单
    		Jmenu.add(online);
    		Jmenu.add(busy);
    		Jmenu.add(invisible);
    		Jmenu.addSeparator();//添加分割线
    		Jmenu.add(openmenu);
    		Jmenu.add(closemenu);
    		
            MyTrayIcon trayicon=new MyTrayIcon(image_c,"MyQQ",Jmenu);
  
            ActionListener actionListener = new ActionListener() {    
                public void actionPerformed(ActionEvent e) {
                    trayIcon.displayMessage("",     
                            msg,    
                            TrayIcon.MessageType.NONE);    //在托盘图标附近显示弹出消息。   [INFO提示信息  ERROR错误信息    NONE普通信息     WARNING警告信息 ]
                   
                }    
            };    
  
            trayIcon.setImageAutoSize(true);    //设置自动调整大小的属性。
            trayIcon.addActionListener(actionListener);    
  
               
            	tray.add(trayIcon);    
            } catch (Exception e1) {    
                e1.printStackTrace();    
            }    
  
        }   
    }  
      
    public static void main(String[] args)  {    
    	msg = "程序已启动";
        new Monitor();    
        thread_key.start();
        thread_mou.start();
    }    
  
}    